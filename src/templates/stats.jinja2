{% extends "base_static.jinja2" %}

{% block title %}
    {% trans %}Playback statistics{% endtrans %}
{% endblock title %}

{% block content %}

{{ page_heading(gettext('Playback statistics')) }}

<button id="day">{% trans %}Day{% endtrans %}</button>
<button id="week">{% trans %}Week{% endtrans %}</button>
<button id="month">{% trans %}Month{% endtrans %}</button>
<button id="year">{% trans %}Year{% endtrans %}</button>

<div id="charts">
    {% trans %}Loading charts&mldr;{% endtrans %}
</div>

<link rel="stylesheet" href="/static/lib/toastui-chart-4.6.1.css">
<script src="/static/lib/toastui-chart-4.6.1.js"></script>

<script>
const loading = document.getElementById('loading');
const plots = document.getElementById('plots');
const buttons = ['day', 'week', 'month', 'year'].map(id => document.getElementById(id));

function createCharts(data) {
    const chartsElements = []

    for (const chart of Object.values(data)) {
        const chartElem = document.createElement('div');
        chartsElements.push(chartElem)
        const options = {
            chart: {
                title: chart['title'],
                width: 900,
                height: 400
            },
        };
        const args = {el: chartElem, data: chart['data'], options: options};
        switch (chart['type']) {
            case 'bar':
                toastui.Chart.barChart(args);
                break;
            case 'column':
                toastui.Chart.columnChart(args);
                break;
            default:
                throw new Error('invalid type: ' + chart['type']);
                break;
        }

    }

    const chartsContainer = document.getElementById('charts');
    chartsContainer.replaceChildren(...chartsElements);
}

async function loadPlots(button) {
    for (const otherButton of buttons) {
        otherButton.disabled = false;
    }
    button.disabled = true;

    const response = await fetch('/stats_data?period=' + encodeURIComponent(button.id));
    const json = await response.json();
    createCharts(json);
}

document.addEventListener('DOMContentLoaded', () => {
    for (const button of buttons) {
        button.addEventListener('click', () => loadPlots(button));
    }

    loadPlots(buttons[1]);
});

</script>

{% endblock content %}
